import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

# Load dataset
df = pd.read_csv('/Users/chrisalleyne/Downloads/bike_sharing_dataset/day.csv')
df['dteday'] = pd.to_datetime(df['dteday'])
df.set_index('dteday', inplace=True)

# Select features and target
features = ['temp', 'atemp', 'hum', 'windspeed', 'season', 'yr', 'mnth', 'weekday', 'workingday', 'weathersit']
target = 'cnt'

# Normalize data
scaler = MinMaxScaler()
df_scaled = scaler.fit_transform(df[features + [target]])

# Create sequences for LSTM
sequence_length = 30  # Use past 30 days to predict the next day
X, y = [], []
for i in range(len(df_scaled) - sequence_length):
    X.append(df_scaled[i:i + sequence_length, :-1])  # Features
    y.append(df_scaled[i + sequence_length, -1])  # Target
X, y = np.array(X), np.array(y)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=False)

# Build LSTM model
model = Sequential([
    LSTM(50, activation='relu', return_sequences=True, input_shape=(sequence_length, X.shape[2])),
    Dropout(0.2),
    LSTM(50, activation='relu'),
    Dropout(0.2),
    Dense(1)
])

# Compile the model
model.compile(optimizer='adam', loss='mse')

# Train the model
history = model.fit(X_train, y_train, epochs=50, batch_size=16, validation_data=(X_test, y_test), verbose=1)

# Make predictions
y_pred = model.predict(X_test)

# Inverse scale predictions
scaler_target = MinMaxScaler()
scaler_target.fit(df[['cnt']])
y_pred_rescaled = scaler_target.inverse_transform(y_pred.reshape(-1, 1))
y_test_rescaled = scaler_target.inverse_transform(y_test.reshape(-1, 1))

# Plot results
plt.figure(figsize=(12, 6))
plt.plot(y_test_rescaled, label='Actual Demand')
plt.plot(y_pred_rescaled, label='Predicted Demand', linestyle='dashed')
plt.legend()
plt.xlabel('Days')
plt.ylabel('Bike Rental Count')
plt.title('Bike Rental Demand Prediction using LSTM')
plt.show()
